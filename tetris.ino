/*
    Copyright Matthew Fisher <matt.fisher@fishworks.io>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    This is a Tetris clone using a few push buttons, an OLED SSD1306(I2C) and an ATMega328P
    (Arduino Uno/Nano).
 */

#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_HEIGHT 128 // OLED display height, in pixels
#define SCREEN_WIDTH  32  // OLED display width, in pixels
#define OLED_RESET    -1  // Reset pin (or -1 if sharing Arduino reset pin)
#define OLED_ROTATION  1  // Rotate the display

// The display we will be working with to show the contents of the game.
Adafruit_SSD1306 display(SCREEN_HEIGHT, SCREEN_WIDTH, &Wire, OLED_RESET);


// fishworks logo, converted using https://github.com/javl/image2cpp
const unsigned char fishworksLogo [] PROGMEM = {
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00,
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00,
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00,
	0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00,
	0x00, 0x07, 0x20, 0x00, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00,
	0x00, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x7f, 0xf0, 0x00,
	0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00,
	0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x1e, 0x01, 0xff, 0xfc, 0x3e, 0x01, 0xff, 0xfc, 0x7f,
	0x03, 0xff, 0xfc, 0xff, 0x03, 0xff, 0xfe, 0xff, 0x03, 0xff, 0xfe, 0xff, 0x03, 0xff, 0xfe, 0xff,
	0x03, 0xff, 0xfe, 0x7e, 0x03, 0xff, 0xfe, 0x7e, 0x03, 0xff, 0xfe, 0x7e, 0x07, 0xff, 0xfe, 0x7e,
	0x07, 0xff, 0xfe, 0x7c, 0x06, 0x3f, 0xff, 0x7c, 0x06, 0x1f, 0xff, 0x7c, 0x04, 0x1f, 0xfb, 0x7c,
	0x04, 0x0f, 0xf3, 0x7c, 0x04, 0xcf, 0xf3, 0x7c, 0x01, 0xcf, 0xf3, 0x78, 0x01, 0xc7, 0xf3, 0x78,
	0x03, 0x87, 0xf3, 0x78, 0x03, 0x83, 0xf3, 0x78, 0x03, 0x03, 0xf3, 0x78, 0x03, 0x33, 0xf3, 0x78,
	0x07, 0x71, 0xf3, 0x70, 0x07, 0x79, 0xf3, 0x70, 0x07, 0x79, 0xf3, 0x70, 0x07, 0x7c, 0xf3, 0x70,
	0x06, 0xfc, 0xff, 0x70, 0x06, 0xfc, 0xff, 0x70, 0x0e, 0xfe, 0x7f, 0x70, 0x0e, 0xfe, 0x7f, 0x70,
	0x0e, 0xfe, 0x7f, 0x70, 0x0e, 0xff, 0x3f, 0x60, 0x0e, 0xff, 0x3f, 0x60, 0x0e, 0xdf, 0x3e, 0xe0,
	0x0e, 0xcf, 0x9e, 0xe0, 0x0e, 0xcf, 0x9e, 0xe0, 0x0e, 0xcf, 0x9e, 0xe0, 0x1e, 0xcf, 0x8c, 0xe0,
	0x1e, 0xcf, 0xcc, 0xc0, 0x1e, 0xcf, 0xc1, 0xc0, 0x1e, 0xcf, 0xe1, 0xc0, 0x1e, 0xcf, 0xe1, 0x80,
	0x1e, 0xcf, 0xe3, 0x80, 0x1e, 0xcf, 0xf3, 0xa0, 0x3e, 0xcf, 0xf1, 0x20, 0x3e, 0xdf, 0xf8, 0x20,
	0x3e, 0xff, 0xf8, 0x60, 0x3e, 0xff, 0xfc, 0x60, 0x3e, 0xff, 0xfe, 0xe0, 0x7e, 0x7f, 0xff, 0xe0,
	0x7e, 0x7f, 0xff, 0xc0, 0x7e, 0x7f, 0xff, 0xc0, 0x7e, 0x7f, 0xff, 0xc0, 0xfe, 0x7f, 0xff, 0xc0,
	0xff, 0x7f, 0xff, 0xc0, 0xff, 0x7f, 0xff, 0xc0, 0xff, 0x3f, 0xff, 0xc0, 0xfe, 0x3f, 0xff, 0x80,
	0xfe, 0x3f, 0xff, 0x80, 0x78, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0x80,
	0x00, 0x1f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00,
	0x00, 0x0f, 0xfe, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x07, 0xfc, 0x00,
	0x00, 0x03, 0xf8, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x04, 0xf0, 0x00, 0x00, 0x04, 0x40, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
    Serial.begin(115200);

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for(;;); // Don't proceed, loop forever
    }

    display.setRotation(OLED_ROTATION);
    display.clearDisplay();
    display.drawBitmap(0, 0, fishworksLogo, display.width(), display.height(), 1);
    display.display();
}

void loop() {}
